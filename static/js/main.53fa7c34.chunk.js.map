{"version":3,"sources":["services/apiclient/api-client.notimplemented.tsx","services/apiclient/context.tsx","services/apiclient/index.tsx","services/apiclient/hooks.tsx","components/header/Navigation.tsx","components/header/Header.tsx","config/config.tsx","config/ApiServersConfigContext.tsx","components/avatar/AvatarImage.tsx","components/avatar/Avatar.tsx","services/use-server-status.tsx","components/target-selector/TargetSelector.tsx","components/message-form/MessageForm.tsx","components/loader/Spinner.tsx","components/toast/Toast.tsx","components/toast/ToastContainer.tsx","components/toast/ToastProvider.tsx","components/themes/darkTheme.ts","components/themes/GlobalStyle.ts","services/use-send-message.tsx","App.tsx","reportWebVitals.js","services/apiclient/default-api-client.tsx","index.tsx"],"names":["NotImplementedApiClient","url","headers","Promise","reject","ApiClientContext","React","createContext","useApiClient","useContext","Navigation","styled","nav","theme","header","headerText","Header","props","ThemeContext","showHeader","id","appConfig","ApiServersConfigContext","AvatarImage","img","selected","selectedColor","enabled","Avatar","useState","setSelected","setEnabled","fetchServerStatus","apiClient","server","a","isAlive","get","then","console","log","useServerStatus","useEffect","mounted","src","avatar","alt","onClick","isSelected","onChange","data-testid","TargetSelectorContainer","div","TargetSelector","apiServers","Map","selectedServers","setSelectedServers","onServerChange","apiServer","set","onServerSelected","targetServers","filter","map","MessageFormContainer","TextArea","textarea","text","SendButton","button","MessageForm","message","setMessage","rows","value","event","target","placeholder","disabled","length","onMessageSend","SpinnerContainer","small","middle","large","SpinnerBounceMiddle","SpinnerText","Spinner","loading","ToastWrapper","ToastAvatar","ToastMessage","toastColor","Toast","toast","content","ToastContainerWrapper","ToastContainer","createPortal","toasts","item","document","body","NotImplementedProvider","addToast","Error","removeToast","ToastContext","nextId","ToastProvider","children","setToasts","useCallback","setTimeout","t","Provider","darkTheme","toggleBorder","background","GlobalStyle","createGlobalStyle","postMessage","isSent","options","method","JSON","stringify","phrase","fetch","catch","e","App","setLoading","forEach","ok","name","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DefaultApiClient","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.53fa7c34.chunk.js","sourcesContent":["import { ApiClient } from \"./api-client\";\n\n\nexport class NotImplementedApiClient implements ApiClient {\n  get<T>(url: string, headers?: { [key: string]: string; }): Promise<T> {\n    return Promise.reject(\"Method not implemented.\");\n  }\n  post<T>(url: string, headers?: { [key: string]: string; }): Promise<T> {\n    return Promise.reject(\"Method not implemented.\");\n  }\n\n}\n","import React from \"react\";\nimport { ApiClient } from \"./\";\nimport { NotImplementedApiClient } from \"./api-client.notimplemented\";\n\n\nexport const ApiClientContext = React.createContext<ApiClient>(new NotImplementedApiClient())\n","export * from \"./context\"\nexport * from \"./hooks\"\nexport * from \"./api-client\"\nexport * from \"./api-client.mock\"\n","import { useContext } from \"react\";\nimport { ApiClient } from \".\";\nimport { ApiClientContext } from \"./context\";\n\nexport function useApiClient(): ApiClient {\n  return useContext(ApiClientContext)\n}\n","import styled from \"styled-components\";\n\nexport const Navigation = styled.nav`\n background: ${({theme}) => theme.header};\n height: 40px;\n z-index: 1;\n display: flex;\n justify-content:space-between;\n align-items: center;\n padding: 0 10px;\n font-family: Motiva-Sans, Sans-serif;\n font-weight: 200;\n font-size: 22px;\n color: ${({ theme }) => theme.headerText};\n `\n","import React, { useContext } from \"react\"\nimport { ThemeContext } from \"styled-components\";\nimport { Navigation } from \"./Navigation\"\n\nexport const Header: React.FC = (props) => {\n  const theme = useContext(ThemeContext);\n  return (\n    theme.showHeader && <Navigation>\n      <div id=\"brand\">Aigor says...</div>\n    </Navigation>\n  )\n}\n","export const appConfig = [\n  {\n    \"id\": \"abel\",\n    \"name\": \"Abel\",\n    \"url\": \"http://clank.local:5000\",\n    \"avatar\": \"./avatars/athleich.jpg\"\n  },\n  {\n    \"id\": \"hugo\",\n    \"name\": \"Hugo\",\n    \"url\": \"http://bmo.local:5000\",\n    \"avatar\": \"./avatars/oguhza.jpg\"\n  }\n]\n\n","import React from \"react\";\nimport { ApiServer } from \"./ApiServer\";\nimport { appConfig } from \"./config\";\n\nexport const ApiServersConfigContext = React.createContext<ApiServer[]>(appConfig)\n","import styled from \"styled-components\";\nimport ThemeInterface from \"../themes/ThemeInterface\";\n\ntype AvatarImageProps = {\n  selected: boolean;\n  enabled: boolean;\n  theme: ThemeInterface;\n}\n\nexport const AvatarImage = styled.img`\nwidth: 84px;\nheight: 84px;\nmargin-top: 1em;\nmargin-right: 1em;\n\n-webkit-border-radius: 50%;\n-moz-border-radius: 50%;\nborder-radius: 50%;\n\n-webkit-box-shadow: 0 0 0 5px ${(props: AvatarImageProps) => props.selected ? props.theme.selectedColor : \"rgba(255,255,255,0.2)\"}, 0 0 0 4px #999, 0 2px 5px 4px rgba(0,0,0,.2);\n-moz-box-shadow: 0 0 0 5px ${(props: AvatarImageProps) => props.selected ? props.theme.selectedColor : \"rgba(255,255,255,0.2)\"}, 0 0 0 4px #999, 0 2px 5px 4px rgba(0,0,0,.2);\nbox-shadow: 0 0 0 5px ${(props: AvatarImageProps) => props.selected ? props.theme.selectedColor : \"rgba(255,255,255,0.2)\"}, 0 0 0 4px #999, 0 2px 5px 4px rgba(0,0,0,.2);\n\nopacity: ${(props: AvatarImageProps) => props.enabled ? 1 : .2};\n\n`\n","import React, { useEffect, useState } from \"react\"\nimport { ApiServer } from \"../../config/ApiServer\"\n// import { useInterval } from \"../../hooks/useInterval\"\nimport { useServerStatus } from \"../../services/use-server-status\"\nimport { AvatarImage } from \"./AvatarImage\"\n\nexport type AvatarProps = {\n  server: ApiServer;\n  onChange?: (apiServer: ApiServer, selected: boolean) => void;\n}\n\n// const CHECK_INTERVAL = 5000\n\nexport const Avatar: React.FC<AvatarProps> = (props) => {\n  const [selected, setSelected] = useState(false)\n  const [enabled, setEnabled] = useState(false)\n  const fetchServerStatus = useServerStatus()\n\n  useEffect(() => {\n    let mounted = true;\n    fetchServerStatus(props.server).then((isAlive) => { mounted && setEnabled(isAlive) })\n    return () => { mounted = false }\n  }, [props.server, fetchServerStatus])\n\n  const onClick = () => {\n    if (!enabled) {\n      return\n    }\n    const isSelected = !selected\n    setSelected(isSelected)\n    if (props.onChange) {\n      props.onChange(props.server, isSelected)\n    }\n  }\n\n  /*\n  useInterval(() => {\n    fetchServerStatus(props.server).then((isAlive) => setEnabled(isAlive))\n    console.log(\"tick\", props.server.name)\n  }, CHECK_INTERVAL)\n  */\n\n  return (\n    <AvatarImage\n      src={props.server.avatar}\n      alt={props.server.id}\n      onClick={onClick}\n      selected={selected}\n      enabled={enabled}\n      data-testid=\"avatar-image\"\n    />\n  )\n}\n","import { ApiServer } from \"../config/ApiServer\";\nimport { useApiClient } from \"./apiclient\";\n\n\nexport const useServerStatus = () => {\n  const apiClient = useApiClient()\n  return async (server: ApiServer): Promise<boolean> => {\n    if (!server?.url) { return false }\n    const url = `${server.url}/health`\n    let isAlive = false\n    try {\n      await apiClient.get(url).then(() => isAlive = true)\n    } catch (e) {\n      console.log(e)\n    }\n    return isAlive\n  }\n}\n\n","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\nimport { ApiServer } from \"../../config/ApiServer\"\nimport { ApiServersConfigContext } from \"../../config/ApiServersConfigContext\"\nimport { Avatar } from \"../avatar/Avatar\"\n\nconst TargetSelectorContainer = styled.div`\n  padding: 10px;\n  margin: auto;\n  width: fit-content;\n`\n\n\nexport type TargetSelectorProps = {\n  onServerSelected?: (selectedServers: ApiServer[]) => void;\n}\n\nexport const TargetSelector: React.FC<TargetSelectorProps> = (props) => {\n  const apiServers = React.useContext(ApiServersConfigContext)\n  const [selectedServers, setSelectedServers] = useState(new Map())\n\n  const onServerChange = (apiServer: ApiServer, selected: boolean) => {\n    selectedServers.set(apiServer.id, selected)\n    setSelectedServers(selectedServers)\n    if (props.onServerSelected) {\n      const targetServers = apiServers.filter((server) => selectedServers.get(server.id))\n      props.onServerSelected(targetServers)\n    }\n  }\n\n  return (\n    <TargetSelectorContainer>\n      {\n        apiServers.map(apiServer =>\n          <Avatar\n            key={apiServer.id}\n            server={apiServer}\n            onChange={onServerChange}\n          />\n        )\n      }\n    </TargetSelectorContainer>\n  )\n}\n","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\n\nconst MessageFormContainer = styled.div`\n  padding: 10px;\n  width: 90%;\n  margin: auto;\n`\n\nconst TextArea = styled.textarea`\n  width: 100%;\n  padding:10px;\n  border:none ;\n  font-size:1.5em;\n  border-radius:10px;\n  outline:none;\n  transition: box-shadow .3s ease;\n  display: block;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  color: ${({theme})=> theme.text};\n  :focus {\n    box-shadow: 0px 0px 0px 4px ${({ theme }) => theme.selectedColor};\n  }\n`\nconst SendButton = styled.button`\n  width: 100%;\n  padding: 10px;\n  background-color: ${({ theme }) => theme.selectedColor};\n  display: block;\n  border: 0px;\n  border-radius: 10px;\n  font-size: 1.8em;\n  margin-top: 10px;\n  color: ${({ theme }) => theme.text};\n  transition: opacity .3s ease;\n  :disabled {\n    opacity: .1\n  }\n`\n\ntype MessageFormProps = {\n  onMessageSend: (message: string) => void;\n  enabled: boolean;\n}\n\nexport const MessageForm: React.FC<MessageFormProps> = (props) => {\n  const [message, setMessage] = useState(\"\")\n  const sendForm = () => {\n    props.onMessageSend(message)\n    setMessage(\"\")\n  }\n\n  return (\n    <MessageFormContainer>\n      <TextArea\n        rows={5}\n        value={message}\n        onChange={(event) => setMessage(event.target.value)}\n        placeholder=\"¿Qué quieres que les diga?\"\n      >\n      </TextArea>\n      <SendButton disabled={!props.enabled || message.length < 1} onClick={sendForm}>enviar</SendButton>\n    </MessageFormContainer>\n  )\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst SpinnerContainer = styled.div`\n    position:fixed;\n    width:100%;\n    left:0;right:0;top:0;bottom:0;\n    background-color: rgba(0,0,0,.7);\n    z-index:9999;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n    flex-flow: column;\n`\n\nconst small = \"8px\"\nconst middle = \"16px\"\nconst large = \"40px\"\n\nconst SpinnerBounceMiddle = styled.div`\n\n@-webkit-keyframes bounce-middle {\n  0% {\n    height: ${small};\n    margin-top: ${middle};\n    margin-bottom: ${middle};\n  }\n  50% {\n    height: ${large};\n    margin-top: 0px;\n    margin-bottom: 0px;\n  }\n  100% {\n    height: ${small};\n    margin-top: ${middle};\n    margin-bottom: ${middle};\n  }\n}\n\n@keyframes bounce-middle {\n  0% {\n    height: ${small};\n    margin-top: ${middle};\n    margin-bottom: ${middle};\n  }\n  50% {\n    height: ${large};\n    margin-top: 0px;\n    margin-bottom: 0px;\n  }\n  100% {\n    height: ${small};\n    margin-top: ${middle};\n    margin-bottom: ${middle};\n  }\n}\n\n&, :before, :after {\n  width: ${small};\n  height: ${large};\n  background-color: ${({ theme }) => theme.selectedColor};\n  border-radius: 2px;\n}\n\n  display: inline-block;\n  position: relative;\n\n  :before, :after {\n  content: \"\";\n  position: absolute;\n  display: block;\n  top: 0px;\n}\n:before {\n  left: -12px;\n}\n:after {\n  left: 12px;\n}\n\n  -webkit-animation: bounce-middle 0.6s ease 0.1s infinite;\n          animation: bounce-middle 0.6s ease 0.1s infinite;\n\n:before, :after {\n  top: 50%;\n  -webkit-transform: translateY(-10px) translateZ(0);\n          transform: translateY(-10px) translateZ(0);\n}\n:before {\n  -webkit-animation: bounce-middle 0.6s ease 0s infinite;\n          animation: bounce-middle 0.6s ease 0s infinite;\n}\n:after {\n  -webkit-animation: bounce-middle 0.6s ease 0.2s infinite;\n          animation: bounce-middle 0.6s ease 0.2s infinite;\n}\n`\nconst SpinnerText = styled.div`\n    display: block;\n    color: ${({ theme }) => theme.selectedColor};\n    margin-top: 10px;\n    font-size: .8em;\n`\n\ntype SpinnerProps = {\n  loading: boolean;\n}\n\n\nexport const Spinner: React.FC<SpinnerProps> = (props) => {\n  return (\n    !props.loading ?\n      null :\n      <SpinnerContainer>\n        <SpinnerBounceMiddle />\n        <SpinnerText>hablando con los chicos...</SpinnerText>\n      </SpinnerContainer>\n  )\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ToastData } from \"./ToastData\";\n\n\nconst ToastWrapper = styled.div`\n  width: 100%;\n  padding-left: 10px;\n  animation: popFromBottom 0.5s ease-in-out;\n  display: flex;\n  flex-direction: row;\n  justify-content: end;\n  @keyframes popFromBottom {\n    0% { transform: translateY(300px) scale(0); }\n    100% { transform: translateY(0px) scale(1); }\n  }\n`\n\nconst ToastAvatar = styled.img`\n  width: 54px;\n  height: 54px;\n  margin-top: 1em;\n  margin-right: 1em;\n\n  -webkit-border-radius: 50%;\n  -moz-border-radius: 50%;\n  border-radius: 50%;\n\n  -webkit-box-shadow: 0 0 0 5px rgba(255,255,255,0.2), 0 0 0 4px #fff, 0 2px 5px 4px rgba(0,0,0,.2);\n  -moz-box-shadow: 0 0 0 5px rgba(255,255,255,0.2), 0 0 0 4px #fff, 0 2px 5px 4px rgba(0,0,0,.2);\n  box-shadow: 0 0 0 5px rgba(255,255,255,0.2), 0 0 0 4px #fff, 0 2px 5px 4px rgba(0,0,0,.2);\n`\n\nconst ToastMessage = styled.div`\n  background: ${({ theme }) => theme.toastColor};\n  padding: 10px 50px 10px 10px;\n  border-radius: 50px 50px 50px 50px ;\n  margin: 20px -40px 20px 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  -webkit-box-shadow: 0 0 0 5px rgba(255,255,255,0.2), 0 0 0 4px #fff, 0 2px 5px 4px rgba(0,0,0,.2);\n  -moz-box-shadow: 0 0 0 5px rgba(255,255,255,0.2), 0 0 0 4px #fff, 0 2px 5px 4px rgba(0,0,0,.2);\n  box-shadow: 0 0 0 5px rgba(255,255,255,0.2), 0 0 0 4px #fff, 0 2px 5px 4px rgba(0,0,0,.2);\n`\n\ntype ToastProps = {\n  toast: ToastData;\n}\n\nexport const Toast: React.FC<ToastProps> = (props) => (\n  <ToastWrapper>\n    <ToastMessage>{props.toast.content}</ToastMessage>\n    <ToastAvatar src=\"./avatars/aigor.jpg\"></ToastAvatar>\n  </ToastWrapper >\n);\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styled from \"styled-components\";\nimport { Toast } from \"./Toast\";\nimport { ToastData } from \"./ToastData\";\n\nconst ToastContainerWrapper = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: end;\n`\n\ntype ToastContainerProps = {\n  toasts: ToastData[]\n}\n\nexport const ToastContainer: React.FC<ToastContainerProps> = (props) => {\n  return createPortal(\n    <ToastContainerWrapper>\n      {\n        props.toasts.map(item => ( <Toast key={item.id} toast={item} />))\n      }\n    </ToastContainerWrapper>,\n    document.body\n  );\n}\n","import React, { useContext } from \"react\";\nimport { createContext, useCallback, useState } from \"react\";\nimport { ToastContainer } from \"./ToastContainer\";\nimport { ToastData } from \"./ToastData\";\n\n\ntype ToastProviderInterface = {\n  addToast: (content: string) => void,\n  removeToast: (id: number) => void\n}\n\nconst NotImplementedProvider: ToastProviderInterface = {\n  addToast: (message: string) => { throw new Error(\"Not implemented\") },\n  removeToast: (id: number) => { throw new Error(\"Not implemented\") }\n}\n\nconst ToastContext = createContext<ToastProviderInterface>(NotImplementedProvider)\n\nlet nextId = 1\n\nconst ToastProvider: React.FC = ({ children }) => {\n  const [toasts, setToasts] = useState([] as ToastData[])\n\n  const addToast = useCallback(\n    (content: string) => {\n      const toast = { id: nextId++, content: content }\n      setToasts((toasts) => [...toasts, toast])\n      setTimeout(() => removeToast(toast.id), 3000)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [setToasts],\n  )\n\n  const removeToast = useCallback(\n    (id: number) => {\n      setToasts((toasts) => toasts.filter(t => t.id !== id))\n    },\n    [setToasts]\n  )\n\n  return (\n    <ToastContext.Provider value={\n      {\n        addToast,\n        removeToast\n      }\n    }>\n      <ToastContainer toasts={toasts} />\n      {children}\n    </ToastContext.Provider>\n  )\n}\n\nconst useToast = () => {\n  const toastHelpers = useContext(ToastContext);\n\n  return toastHelpers;\n};\n\nexport { ToastContext, useToast };\nexport default ToastProvider\n","import ThemeInterface from \"./ThemeInterface\";\n\nexport const darkTheme: ThemeInterface = {\n  showHeader: false,\n  text: \"#124040\",\n  toggleBorder: \"#387373\",\n  background: \"#1c1c1c\",\n  selectedColor: \"#D94E5A\",\n  toastColor: \"rgba(255,255,255,.9)\",\n};\n","import { createGlobalStyle } from \"styled-components\";\nimport { darkTheme } from \"./darkTheme\";\nimport ThemeInterface from \"./ThemeInterface\";\n\nexport const GlobalStyle = createGlobalStyle<{ theme: ThemeInterface }>`\n  body {\n    background-color: ${({ theme }) => theme.background};\n    color: ${darkTheme.text};\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n    transition: all 0.50s linear;\n  }\n  `;\n","import { ApiServer } from \"../config/ApiServer\";\n\nconst postMessage = async (server: ApiServer, message: string): Promise<boolean> => {\n  const url = `${server.url}/api/Speaker/say`\n  let isSent = false\n  try {\n    const options = {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ phrase: message })\n    }\n    await fetch(url, options)\n      .then(() => isSent = true)\n      .catch((e) => console.log(e))\n  } catch (e) {\n    console.log(e)\n  }\n  return isSent\n}\n\nexport const useSendMessage = () => postMessage\n","import React, { useState } from \"react\"\nimport { Header } from './components/header/Header';\nimport { TargetSelector } from './components/target-selector/TargetSelector';\nimport { ApiServer } from \"./config/ApiServer\";\nimport { MessageForm } from \"./components/message-form/MessageForm\";\nimport { Spinner } from \"./components/loader/Spinner\";\nimport { useToast } from \"./components/toast/ToastProvider\";\nimport { GlobalStyle } from \"./components/themes\";\nimport { useSendMessage } from \"./services/use-send-message\";\n\nfunction App() {\n  const [selectedServers, setSelectedServers] = useState([] as ApiServer[])\n  const [loading, setLoading] = useState(false)\n  const toast = useToast()\n  const postMessage = useSendMessage()\n\n  const sendMessage = (message: string): void => {\n    setLoading(true)\n    selectedServers.forEach((server) => {\n      postMessage(server, message)\n        .then((ok) => {\n          toast.addToast(`mensaje enviado a ${server.name} ${ok? \"ok\": \"error\"}`)\n        })\n        .catch((e) => toast.addToast(e))\n        .finally(() => setLoading(false))\n    })\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Header />\n      <TargetSelector onServerSelected={setSelectedServers} />\n      <MessageForm\n        onMessageSend={sendMessage}\n        enabled={selectedServers.length > 0}\n      />\n      <Spinner loading={loading}></Spinner>\n      {loading}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApiClient } from \"./api-client\";\n\nexport class DefaultApiClient implements ApiClient {\n  async get(url: string, headers?: { [key: string]: string; }): Promise<Response> {\n    const options = {\n      method: \"GET\",\n      headers: headers\n    }\n    return fetch(url, options)\n  }\n\n  post<T>(url: string, headers?: { [key: string]: string; }): Promise<T> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ToastProvider from './components/toast/ToastProvider';\nimport { ThemeProvider } from 'styled-components';\nimport { darkTheme } from './components/themes';\nimport { ApiClientContext } from './services/apiclient';\nimport { DefaultApiClient } from './services/apiclient/default-api-client';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={darkTheme}>\n      <ApiClientContext.Provider value={new DefaultApiClient()}>\n        <ToastProvider>\n          <App />\n        </ToastProvider >\n      </ApiClientContext.Provider>\n    </ThemeProvider>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}