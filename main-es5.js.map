{"version":3,"sources":["webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/api/aigor-api.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.config.ts","webpack:///src/app/app.module.ts","webpack:///src/app/models/aigor-message.ts","webpack:///src/app/pages/home/home.component.ts","webpack:///src/app/pages/pages.module.ts","webpack:///src/app/pages/talk/talk.component.ts","webpack:///src/app/pages/talk/talk.component.html","webpack:///src/app/ui/host-selector/host-selector.component.ts","webpack:///src/app/ui/host-selector/host-selector.component.html","webpack:///src/app/ui/nav-menu/nav-menu.component.ts","webpack:///src/app/ui/nav-menu/nav-menu.component.html","webpack:///src/app/ui/ui.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AigorApiService","http","host","message","url","post","pipe","handleError","get","observe","responseType","r","operation","result","error","console","providedIn","AppComponent","title","selector","templateUrl","styleUrls","AppConfig","jsonFile","config","reject","toPromise","response","settings","JSON","stringify","initializeApp","appConfig","load","AppModule","provide","useFactory","deps","multi","withServerTransition","appId","forRoot","path","redirectTo","pathMatch","declarations","imports","providers","bootstrap","AigorMessage","phrase","HomeComponent","hosts","apiServers","PagesModule","component","TalkComponent","aigorApi","snackBar","model","talk","subscribe","_","open","duration","onTalk","STATUS_RETRY_MS","HostSelectorComponent","aigorApiService","refreshHostStatus","log","i","isAlive","status","length","setTimeout","NavMenuComponent","isExpanded","UiModule","environment","production","getBaseUrl","document","getElementsByTagName","href","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {AigorMessage} from \"../models/aigor-message\";\nimport {Observable, of} from \"rxjs\";\nimport {catchError, last, map} from \"rxjs/operators\";\nimport {AigorSaysApiServer} from \"../models/aigor-says-app-config\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AigorApiService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  talk(host: AigorSaysApiServer, message: AigorMessage):  Observable<any> {\n    const url = `${host.url}/api/Speaker/say`;\n    return this.http.post(url, message).pipe(\n      catchError(this.handleError('talk', false))\n    )\n  }\n\n  isAlive(host: AigorSaysApiServer):  Observable<boolean> {\n    const url = `${host.url}/health`;\n    return this.http.get(url, { observe: 'response', responseType: 'text'}).pipe(\n      map(r => true),\n      last(),\n      catchError(this.handleError('isAlive', false))\n    )\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","<body>\r\n  <app-nav-menu></app-nav-menu>\r\n  <div class=\"app-container\">\r\n    <app-host-selector></app-host-selector>\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</body>\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {environment} from '../environments/environment';\r\nimport {AigorSaysAppConfig} from \"./models/aigor-says-app-config\";\r\nimport {Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class AppConfig {\r\n  static settings: AigorSaysAppConfig;\r\n  constructor(private http: HttpClient) {}\r\n  load() {\r\n    const jsonFile = `assets/config/${environment.config}`;\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get(jsonFile).toPromise().then((response : AigorSaysAppConfig) => {\r\n        AppConfig.settings = <AigorSaysAppConfig>response;\r\n        resolve();\r\n      }).catch((response: any) => {\r\n        reject(`Could not load file '${jsonFile}': ${JSON.stringify(response)}`);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {APP_INITIALIZER, NgModule} from '@angular/core';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport {RouterModule} from \"@angular/router\";\r\nimport {AppComponent} from \"./app.component\";\r\nimport {PagesModule} from \"./pages/pages.module\";\r\nimport {UiModule} from \"./ui/ui.module\";\r\nimport {AppConfig} from \"./app.config\";\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {FlexLayoutModule} from \"@angular/flex-layout\";\r\n\r\nfunction initializeApp(appConfig: AppConfig) {\r\n  return () => appConfig.load();\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule.withServerTransition({appId: 'aigor-says-webapp'}),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    RouterModule.forRoot([\r\n      {path: '**', redirectTo: '/', pathMatch: 'full'}\r\n    ]),\r\n    UiModule,\r\n    PagesModule,\r\n    BrowserAnimationsModule,\r\n    FlexLayoutModule\r\n  ],\r\n  providers: [\r\n    AppConfig,\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: initializeApp,\r\n      deps: [AppConfig], multi: true\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","export class AigorMessage {\n  constructor(\n    public phrase: string\n  ) {}\n}\n","import {Component} from '@angular/core';\r\nimport {AigorSaysApiServer} from \"../../models/aigor-says-app-config\";\r\nimport {AppConfig} from \"../../app.config\";\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent {\r\n  public hosts:AigorSaysApiServer[] = AppConfig.settings.apiServers;\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HomeComponent} from \"./home/home.component\";\nimport {UiModule} from \"../ui/ui.module\";\nimport {TalkComponent} from './talk/talk.component';\nimport {RouterModule} from \"@angular/router\";\nimport {FormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {FlexLayoutModule} from \"@angular/flex-layout\";\n\n\n@NgModule({\n  declarations: [\n    HomeComponent,\n    TalkComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forRoot([\n      {path: '', component: HomeComponent},\n      {path: 'talk/:id', component: TalkComponent}\n    ]),\n    FormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    FlexLayoutModule,\n  ]\n})\nexport class PagesModule {\n}\n","import {Component, OnInit} from '@angular/core';\nimport {AigorMessage} from \"../../models/aigor-message\";\nimport {AigorApiService} from \"../../api/aigor-api.service\";\nimport {AigorSaysApiServer} from \"../../models/aigor-says-app-config\";\nimport {AppConfig} from \"../../app.config\";\nimport {MatSnackBar } from \"@angular/material/snack-bar\";\n\n@Component({\n  selector: 'app-talk',\n  templateUrl: './talk.component.html',\n  styleUrls: ['./talk.component.css']\n})\nexport class TalkComponent implements OnInit {\n  model = new AigorMessage('');\n  host: AigorSaysApiServer;\n\n  constructor(private aigorApi: AigorApiService, private snackBar: MatSnackBar) {\n    this.host =  AppConfig.settings.apiServers[0]\n  }\n\n  ngOnInit() {\n  }\n\n  onTalk() {\n    this.aigorApi.talk(this.host, this.model).subscribe( _=> {\n      this.snackBar.open(\"Mensaje enviado\", null, { duration: 5000 })\n    });\n  }\n}\n","<div class=\"container\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFill >\n  <mat-card fxFlex=\"80%\" >\n      <form #talkForm=\"ngForm\">\n          <mat-form-field color=\"accent\">\n            <mat-label>¿Si?, mi amo...</mat-label>\n            <textarea id=\"msg\"\n                      appearance=\"outline\"\n                      matInput\n                      name=\"msg\"\n                      [(ngModel)]=\"model.phrase\"\n                      required\n                      rows=\"2\"\n                      placeholder=\"Tu mensaje\"\n                      #message=\"ngModel\"\n            ></textarea>\n            <mat-error [hidden]=\"message.valid\">\n              El mensaje es requerido\n            </mat-error>\n          </mat-form-field>\n          <button mat-raised-button\n                  color=\"accent\"\n                  [disabled]=\"!talkForm.valid\"\n                  (click)=\"onTalk(); talkForm.resetForm()\"\n          >Habla!\n          </button>\n      </form>\n  </mat-card>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {AigorSaysApiServer} from \"../../models/aigor-says-app-config\";\nimport {AppConfig} from \"../../app.config\";\nimport {AigorApiService} from \"../../api/aigor-api.service\";\n\nconst STATUS_RETRY_MS = 60 * 1000\n\n@Component({\n  selector: 'app-host-selector',\n  templateUrl: './host-selector.component.html',\n  styleUrls: ['./host-selector.component.css']\n})\n\nexport class HostSelectorComponent implements OnInit {\n\n  public hosts:AigorSaysApiServer[]=[];\n\n  constructor(private aigorApiService: AigorApiService) { }\n\n  ngOnInit(): void {\n    this.hosts = AppConfig.settings.apiServers;\n    this.refreshHostStatus();\n  }\n\n  private refreshHostStatus() {\n    console.log('refresh hosts status');\n    for (let i = 0; i < this.hosts.length; i++) {\n       this.aigorApiService.isAlive(this.hosts[i]).subscribe(status => this.hosts[i].isAlive = status);\n    }\n    setTimeout(() => this.refreshHostStatus(), STATUS_RETRY_MS );\n  }\n\n}\n","<nav mat-tab-nav-bar>\n\n  <a mat-tab-link\n     *ngFor=\"let host of hosts\"\n     [routerLink]=\"['/talk', host.id]\"\n     routerLinkActive #rla=\"routerLinkActive\"\n     [active]=\"rla.isActive\"\n  >\n      <span\n        matBadge=\"{{ host.isAlive ? 'on' : 'off' }}\"\n        matBadgeOverlap=\"false\"\n        [matBadgeColor]=\"host.isAlive?'accent':'warn'\" >{{host.name}}</span>\n  </a>\n</nav>\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nav-menu',\r\n  templateUrl: './nav-menu.component.html',\r\n  styleUrls: ['./nav-menu.component.css']\r\n})\r\nexport class NavMenuComponent {\r\n  isExpanded = false;\r\n\r\n  collapse() {\r\n    this.isExpanded = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n}\r\n","<header>\r\n\r\n  <mat-toolbar>\r\n    <button mat-icon-button color=\"primary\" aria-label=\"Return to home\" [routerLink]=\"['/']\">\r\n      <mat-icon>record_voice_over</mat-icon>\r\n    </button>\r\n    soy Aigor!\r\n  </mat-toolbar>\r\n</header>\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {NavMenuComponent} from \"./nav-menu/nav-menu.component\";\nimport {RouterModule} from \"@angular/router\";\nimport { HostSelectorComponent } from './host-selector/host-selector.component';\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatTabsModule} from \"@angular/material/tabs\";\nimport {MatBadgeModule} from \"@angular/material/badge\";\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\n\n\n\n@NgModule({\n  declarations: [\n    NavMenuComponent,\n    HostSelectorComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTabsModule,\n    MatBadgeModule,\n    MatSnackBarModule\n  ],\n    exports: [\n        NavMenuComponent,\n        HostSelectorComponent\n    ]\n})\nexport class UiModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  config: 'config.dev.json'\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport {enableProdMode} from \"@angular/core\";\r\nimport {platformBrowserDynamic} from \"@angular/platform-browser-dynamic\";\r\n\r\nexport function getBaseUrl() {\r\n  return document.getElementsByTagName('base')[0].href;\r\n}\r\n\r\nconst providers = [\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n];\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n\r\n// export { renderModule, renderModuleFactory } from '@angular/platform-server';\r\n"]}